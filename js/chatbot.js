/* ========================================= */
/* ===    "D√ÇY TH·∫¶N KINH" CHATBOT (JS)   === */
/* ========================================= */

// Ch·∫°y code khi to√†n b·ªô trang ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', () => {

    // --- 1. L·∫•y c√°c ph·∫ßn t·ª≠ HTML ---
    const chatWindow = document.getElementById('gcn-chat-window');
    const chatBubble = document.getElementById('chat-bubble');
    const closeBtn = document.getElementById('chat-close-btn');

    const sendBtn = document.getElementById('chat-send-btn');
    const chatInput = document.getElementById('chat-input');
    const chatMessages = document.getElementById('chat-messages');

    // Bi·∫øn l∆∞u l·ªãch s·ª≠ (ƒë·ªÉ AI "nh·ªõ")
    let chatHistory = [];

    // --- 2. X·ª≠ l√Ω b·∫≠t/t·∫Øt c·ª≠a s·ªï chat ---

    // M·ªü chat khi nh·∫•n bong b√≥ng
    chatBubble.addEventListener('click', () => {
        chatWindow.classList.add('open'); // Th√™m class .open (CSS s·∫Ω l√†m hi·ªáu ·ª©ng)
    });

    // ƒê√≥ng chat khi nh·∫•n n√∫t X
    closeBtn.addEventListener('click', () => {
        chatWindow.classList.remove('open'); // Xo√° class .open
    });

    // --- 3. X·ª≠ l√Ω g·ª≠i tin nh·∫Øn ---
    sendBtn.addEventListener('click', sendMessage);

    // G·ª≠i khi nh·∫•n Enter
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    async function sendMessage() {
        const messageText = chatInput.value.trim();
        if (messageText === '') return; // Kh√¥ng g·ª≠i tin nh·∫Øn r·ªóng

        // 1. Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa User l√™n UI
        addMessageToUI('user', messageText);

        // Xo√° √¥ nh·∫≠p li·ªáu
        chatInput.value = '';

        try {
            // 2. G·ªçi "Ng∆∞·ªùi Trung Gian" (chat.js tr√™n Netlify)
            const response = await fetch('/.netlify/functions/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    message: messageText,
                    history: chatHistory // G·ª≠i k√®m l·ªãch s·ª≠
                }),
            });

            if (!response.ok) {
                throw new Error('Bot kh√¥ng tr·∫£ l·ªùi, l·ªói server');
            }

            const data = await response.json();
            const aiReply = data.reply;

            // 3. Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa Bot l√™n UI
            addMessageToUI('bot', aiReply);

            // 4. C·∫≠p nh·∫≠t l·ªãch s·ª≠ (ƒë·ªÉ AI nh·ªõ)
            chatHistory.push({ role: "user", parts: [{ text: messageText }] });
            chatHistory.push({ role: "model", parts: [{ text: aiReply }] });

        } catch (error) {
            console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
            addMessageToUI('bot', 'Ui, bot b·ªã lag m·∫•t r·ªìi... üò• Th·ª≠ l·∫°i sau nha.');
        }
    }

    // --- 4. H√†m tr·ª£ gi√∫p: Th√™m tin nh·∫Øn v√†o UI ---
    function addMessageToUI(sender, text) {
        const messageElement = document.createElement('div');
        // Th√™m class .message v√† .user-message (ho·∫∑c .bot-message)
        messageElement.classList.add('message', `${sender}-message`);

        // Chuy·ªÉn ƒë·ªïi text ƒë·ªÉ hi·ªÉn th·ªã xu·ªëng h√†ng (n·∫øu AI tr·∫£ l·ªùi)
        messageElement.innerHTML = text.replace(/\n/g, '<br>');

        chatMessages.appendChild(messageElement);

        // T·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
});