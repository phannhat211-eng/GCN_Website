/* ========================================= */
/* ===    CHATBOT JS (B·∫£n Test √âp Bu·ªôc)   === */
/* ========================================= */

document.addEventListener('DOMContentLoaded', () => {

    // --- 1. L·∫•y c√°c ph·∫ßn t·ª≠ HTML ---
    const chatWindow = document.getElementById('gcn-chat-window');
    const chatBubble = document.getElementById('chat-bubble');
    const closeBtn = document.getElementById('chat-close-btn');

    const sendBtn = document.getElementById('chat-send-btn');
    const chatInput = document.getElementById('chat-input');
    const chatMessages = document.getElementById('chat-messages');

    // KI·ªÇM TRA L·ªñI TH·∫¶M L·∫∂NG
    if (!chatBubble) {
        console.error("L·ªñI: Kh√¥ng t√¨m th·∫•y bong b√≥ng chat! ID 'chat-bubble' b·ªã sai?");
        return; 
    }
    if (!chatWindow) {
        console.error("L·ªñI: Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï chat! ID 'gcn-chat-window' b·ªã sai?");
        return;
    }

    // --- 2. X·ª≠ l√Ω b·∫≠t/t·∫Øt c·ª≠a s·ªï chat (ƒê√É S·ª¨A) ---

    chatBubble.addEventListener('click', () => {
        console.log("ƒê√£ nh·∫•p v√†o bong b√≥ng!"); // Ki·ªÉm tra

        // THAY V√å D√ôNG CLASS, H√ÉY "√âP" N√ì HI·ªÜN RA
        chatWindow.style.display = 'flex'; // (flex l√† ki·ªÉu hi·ªÉn th·ªã c·ªßa c·ª≠a s·ªï chat)
        chatWindow.style.opacity = '1';
        chatWindow.style.transform = 'translateY(-75px)';
        chatWindow.style.visibility = 'visible';
    });

    closeBtn.addEventListener('click', () => {
        console.log("ƒê√£ nh·∫•p n√∫t ƒê√≥ng!"); // Ki·ªÉm tra

        // "√âP" N√ì ·∫®N ƒêI
        chatWindow.style.display = 'none'; // ·∫®n ƒëi
        chatWindow.style.opacity = '0';
        chatWindow.style.transform = 'translateY(20px)';
        chatWindow.style.visibility = 'hidden';
    });

    // --- 3. X·ª≠ l√Ω g·ª≠i tin nh·∫Øn (Gi·ªØ nguy√™n) ---
    sendBtn.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    async function sendMessage() {
        // (Code g·ª≠i tin nh·∫Øn gi·ªØ nguy√™n nh∆∞ c≈©...)
        const messageText = chatInput.value.trim();
        if (messageText === '') return;
        addMessageToUI('user', messageText);
        chatInput.value = '';
        try {
            const response = await fetch('/.netlify/functions/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: messageText, history: chatHistory }),
            });
            if (!response.ok) throw new Error('Bot kh√¥ng tr·∫£ l·ªùi');
            const data = await response.json();
            const aiReply = data.reply;
            addMessageToUI('bot', aiReply);
            chatHistory.push({ role: "user", parts: [{ text: messageText }] });
            chatHistory.push({ role: "model", parts: [{ text: aiReply }] });
        } catch (error) {
            addMessageToUI('bot', 'Ui, bot b·ªã lag r·ªìi... üò•');
        }
    }

    let chatHistory = [];
    function addMessageToUI(sender, text) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', `${sender}-message`);
        messageElement.innerHTML = text.replace(/\n/g, '<br>');
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
});